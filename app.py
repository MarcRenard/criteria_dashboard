import streamlit as st
import pandas as pd
import requests
from io import StringIO, BytesIO
import os
from dotenv import load_dotenv
import plotly.graph_objects as go

# Charger les variables d'environnement
load_dotenv()

# Configuration de la page
st.set_page_config(
    page_title="Dashboard Crit√®res",
    page_icon="üå≥",
    layout="wide"
)

# Fonction pour r√©cup√©rer les donn√©es depuis Nextcloud
@st.cache_data(ttl=300)  # Cache pendant 5 minutes
def fetch_data_from_nextcloud():
    """R√©cup√®re les donn√©es depuis le serveur Nextcloud (Excel ou CSV)"""

    # R√©cup√©ration des identifiants - d'abord les variables d'environnement, puis les secrets Streamlit
    username = os.getenv('NEXTCLOUD_USER')
    password = os.getenv('NEXTCLOUD_PASSWORD')

    # Si pas trouv√© dans les variables d'environnement, essayer les secrets Streamlit
    if not username or not password:
        try:
            username = st.secrets.get('NEXTCLOUD_USER', username)
            password = st.secrets.get('NEXTCLOUD_PASSWORD', password)
        except:
            # Si les secrets Streamlit ne sont pas disponibles, continuer avec les variables d'env

    if not username or not password:
        st.error("‚ö†Ô∏è Identifiants Nextcloud manquants. V√©rifiez vos variables d'environnement ou secrets Streamlit.")
        return None

    # URL du fichier partag√© Nextcloud
    url = "https://nuage.relief-aura.fr/f/142356"

    try:
        # Tentative de r√©cup√©ration avec authentification
        response = requests.get(url, auth=(username, password), timeout=10)

        if response.status_code == 200:
            # D√©tecter le type de fichier et le traiter accordingly
            try:
                # Essayer de lire comme Excel d'abord (fichier binaire)
                df = pd.read_excel(BytesIO(response.content), engine='openpyxl')
                # Normaliser les noms de colonnes pour correspondre aux attendus
                if len(df.columns) >= 4:
                    df.columns = ['impact', 'type', 'crit√®re', 'description'] + list(df.columns[4:])
                return df
            except:
                # Si Excel √©choue, essayer CSV
                try:
                    df = pd.read_csv(StringIO(response.text), sep=',')
                    if len(df.columns) < 4:
                        # Essayer avec un autre s√©parateur
                        df = pd.read_csv(StringIO(response.text), sep=';')
                    # Normaliser les noms de colonnes
                    if len(df.columns) >= 4:
                        df.columns = ['impact', 'type', 'crit√®re', 'description'] + list(df.columns[4:])
                    return df
                except Exception as e:
                    st.error(f"Erreur lors de la lecture du fichier : {str(e)}")
                    return None
        else:
            st.error(f"Erreur lors de la r√©cup√©ration des donn√©es : HTTP {response.status_code}")
            return None

    except requests.exceptions.RequestException as e:
        st.error(f"Erreur de connexion : {str(e)}")
        return None

def create_tree_visualization(df):
    """Cr√©e une structure de donn√©es hi√©rarchique pour la visualisation"""

    tree_data = []

    # Nettoyer les donn√©es - supprimer les lignes avec des valeurs manquantes critiques
    df_clean = df.dropna(subset=['impact', 'type', 'crit√®re'])

    # Regrouper les donn√©es par hi√©rarchie
    for _, row in df_clean.iterrows():
        tree_data.append({
            'impact': str(row['impact']).strip(),
            'type': str(row['type']).strip(),
            'critere': str(row['crit√®re']).strip(),
            'description': str(row['description']).strip() if pd.notna(row['description']) else "Pas de description disponible"
        })

    return tree_data

def display_interactive_tree(tree_data):
    """Affiche l'arbre interactif avec Streamlit - Version am√©lior√©e"""

    st.subheader("üå≥ Arbre des Crit√®res Interactif")

    # Vue d'ensemble des impacts
    impacts = sorted(list(set([item['impact'] for item in tree_data])))

    # Cr√©er des onglets pour chaque impact (limit√© √† 5 pour √©viter les probl√®mes d'affichage)
    if len(impacts) <= 5:
        # Raccourcir les noms d'onglets pour l'affichage
        tab_names = []
        for impact in impacts:
            if len(impact) > 25:
                tab_name = impact[:22] + "..."
            else:
                tab_name = impact
            tab_names.append(f"üìä {tab_name}")

        tabs = st.tabs(tab_names)

        for i, impact in enumerate(impacts):
            with tabs[i]:
                display_impact_tree(tree_data, impact)
    else:
        # Si trop d'impacts, utiliser une s√©lection
        selected_impact = st.selectbox("üéØ S√©lectionnez un impact :", impacts)
        if selected_impact:
            display_impact_tree(tree_data, selected_impact)

def display_impact_tree(tree_data, selected_impact):
    """Affiche l'arbre pour un impact sp√©cifique"""

    # Filtrer les donn√©es pour l'impact s√©lectionn√©
    filtered_data = [item for item in tree_data if item['impact'] == selected_impact]
    types = sorted(list(set([item['type'] for item in filtered_data])))

    st.markdown(f"### üéØ {selected_impact}")
    st.markdown(f"*{len(types)} types de crit√®res ‚Ä¢ {len(filtered_data)} crit√®res au total*")

    # Affichage en colonnes adaptatives
    if len(types) <= 2:
        cols = st.columns(len(types))
    elif len(types) <= 4:
        cols = st.columns(2)
    else:
        cols = st.columns(3)

    for i, type_name in enumerate(types):
        with cols[i % len(cols)]:
            # Titre du type avec compteur
            type_data = [item for item in filtered_data if item['type'] == type_name]
            st.markdown(f"#### üìÇ {type_name}")
            st.markdown(f"*{len(type_data)} crit√®res*")

            # Afficher les crit√®res dans ce type
            for item in type_data:
                # Utiliser un expander avec ic√¥ne
                with st.expander(f"üîç {item['critere']}", expanded=False):
                    # Description avec formatage am√©lior√©
                    if item['description'] and item['description'] != "Pas de description disponible":
                        st.markdown("**Description :**")
                        st.write(item['description'])

                        # Ajouter des m√©tadonn√©es
                        st.caption(f"üìç {item['impact']} ‚Üí {item['type']}")
                    else:
                        st.info("Aucune description disponible")

            # Espacement entre les colonnes
            if i < len(types) - 1:
                st.markdown("---")

def display_search_results(filtered_data):
    """Affiche les r√©sultats de recherche"""

    for item in filtered_data:
        with st.container():
            col1, col2 = st.columns([3, 1])
            with col1:
                st.markdown(f"**üîç {item['critere']}**")
                if item['description'] and item['description'] != "Pas de description disponible":
                    st.write(item['description'])
                else:
                    st.caption("Pas de description disponible")
            with col2:
                st.caption(f"üìä {item['impact']}")
                st.caption(f"üìÇ {item['type']}")
            st.markdown("---")

def display_summary_stats(df):
    """Affiche des statistiques r√©sum√©es avec visualisations"""

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üìä Impacts", len(df['impact'].unique()))

    with col2:
        st.metric("üìÇ Types", len(df['type'].unique()))

    with col3:
        st.metric("üîç Crit√®res", len(df['crit√®re'].unique()))

    with col4:
        st.metric("üìù Total lignes", len(df))

    # Graphique de r√©partition
    st.markdown("### üìà R√©partition des crit√®res par impact")

    # Compter les crit√®res par impact
    impact_counts = df.groupby('impact').size().reset_index(name='count')
    impact_counts = impact_counts.sort_values('count', ascending=True)

    # Cr√©er un graphique horizontal
    fig = go.Figure()
    fig.add_trace(go.Bar(
        y=impact_counts['impact'],
        x=impact_counts['count'],
        orientation='h',
        marker_color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57'][:len(impact_counts)],
        text=impact_counts['count'],
        textposition='auto'
    ))

    fig.update_layout(
        title="Nombre de crit√®res par impact",
        xaxis_title="Nombre de crit√®res",
        yaxis_title="Impacts",
        height=400,
        margin=dict(l=20, r=20, t=40, b=20)
    )

    st.plotly_chart(fig, use_container_width=True)

def main():
    # Titre principal
    st.title("üå≥ Dashboard des Crit√®res d'√âvaluation")
    st.markdown("---")

    # Sidebar pour les options
    with st.sidebar:
        st.header("üéõÔ∏è Options")
        refresh_data = st.button("üîÑ Actualiser les donn√©es")
        show_raw_data = st.checkbox("üìã Afficher les donn√©es brutes")
        show_search = st.checkbox("üîç Recherche avanc√©e")

        # Section d'aide
        with st.expander("‚ÑπÔ∏è √Ä propos"):
            st.markdown("""
            **Dashboard des Crit√®res d'√âvaluation**

            Ce tableau de bord affiche une hi√©rarchie de crit√®res organis√©e en :
            - **Impacts** principaux
            - **Types** de crit√®res
            - **Crit√®res** d√©taill√©s avec descriptions

            Naviguez par onglets ou utilisez la recherche pour explorer les donn√©es.
            """)

    # Fonctionnalit√© de recherche
    search_query = ""
    if show_search:
        st.markdown("### üîç Recherche dans les crit√®res")
        search_query = st.text_input("Rechercher un crit√®re ou une description:", "")

    # R√©cup√©ration des donn√©es
    with st.spinner("R√©cup√©ration des donn√©es depuis Nextcloud..."):
        df = fetch_data_from_nextcloud()

    if df is not None:
        st.success("‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s !")

        # V√©rification des colonnes requises
        required_columns = ['impact', 'type', 'crit√®re', 'description']
        if not all(col in df.columns for col in required_columns):
            st.error(f"‚ö†Ô∏è Colonnes manquantes. Colonnes trouv√©es : {list(df.columns)}")
            st.info("Colonnes requises : impact, type, crit√®re, description")
            return

        # Statistiques r√©sum√©es
        display_summary_stats(df)
        st.markdown("---")

        # Cr√©ation et affichage de l'arbre
        tree_data = create_tree_visualization(df)

        # Filtrage par recherche si activ√©
        if search_query:
            filtered_tree_data = [
                item for item in tree_data
                if search_query.lower() in item['critere'].lower()
                or search_query.lower() in item['description'].lower()
                or search_query.lower() in item['type'].lower()
                or search_query.lower() in item['impact'].lower()
            ]
            if filtered_tree_data:
                st.info(f"üîç {len(filtered_tree_data)} crit√®res trouv√©s pour '{search_query}'")
                display_search_results(filtered_tree_data)
            else:
                st.warning(f"Aucun r√©sultat trouv√© pour '{search_query}'")
        else:
            display_interactive_tree(tree_data)

        # Affichage des donn√©es brutes si demand√©
        if show_raw_data:
            st.markdown("---")
            st.subheader("üìä Donn√©es brutes")
            st.dataframe(df, use_container_width=True)

            # Option de t√©l√©chargement
            csv = df.to_csv(index=False)
            st.download_button(
                label="üíæ T√©l√©charger les donn√©es (CSV)",
                data=csv,
                file_name="criteria_data.csv",
                mime="text/csv"
            )

    else:
        st.error("‚ùå Impossible de r√©cup√©rer les donn√©es.")

        # Donn√©es de d√©monstration bas√©es sur votre fichier r√©el
        st.info("üí° Utilisation des donn√©es de d√©monstration bas√©es sur votre structure")
        demo_data = {
            'impact': [
                'Impacts environnementaux directs', 'Impacts environnementaux directs',
                'Impacts environnementaux directs', 'Impacts environnementaux directs',
                'Impacts environnementaux indirects', 'Impacts environnementaux indirects',
                'Impacts √©co-sociaux', 'Impacts √©co-sociaux',
                'Impacts temporels et contextuels', 'Crit√®res d\'√©valuation transversaux'
            ],
            'type': [
                'Mat√©riaux et ressources', 'Mat√©riaux et ressources',
                '√ânergie et climat', 'Transport et logistique',
                'Cycle de vie', 'Effets syst√©miques',
                'Justice sociale et √©quit√©', '√âconomie locale et territoriale',
                'Dur√©e et intensit√©', 'Innovation et exemplarit√©'
            ],
            'crit√®re': [
                'Empreinte carbone des mat√©riaux', 'Consommation d\'eau',
                'Consommation √©nerg√©tique √©clairage', 'Distance parcourue mat√©riaux',
                'Fin de vie des mat√©riaux', '√élot de chaleur urbain',
                '√âquit√© d\'acc√®s au projet', 'Impact sur √©conomie locale',
                'Dur√©e de vie du projet', 'Caract√®re innovant'
            ],
            'description': [
                'Gaz √† effet de serre li√©s √† l\'extraction, transformation et transport.',
                'Volume d\'eau utilis√© pour fabriquer les mat√©riaux.',
                '√ânergie utilis√©e pour l\'√©clairage.',
                'Kilom√®tres parcourus par les mat√©riaux depuis leur origine.',
                'Mode de traitement : incin√©ration, enfouissement, recyclage.',
                'Contribution au r√©chauffement local.',
                'Le projet b√©n√©ficie-t-il √©quitablement √† tous les groupes sociaux ?',
                'Effet positif sur l\'√©conomie et l\'emploi local.',
                'Estimation de la dur√©e de vie technique et fonctionnelle.',
                'Degr√© d\'innovation technique, sociale ou environnementale.'
            ]
        }
        df_demo = pd.DataFrame(demo_data)

        display_summary_stats(df_demo)
        st.markdown("---")

        tree_data_demo = create_tree_visualization(df_demo)
        display_interactive_tree(tree_data_demo)

if __name__ == "__main__":
    main()
